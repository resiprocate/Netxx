<chapter id="getstarted"><title>Getting Started with Netxx</title>
    <!-- ################################################################### -->
    <section id="build"><title>Building Netxx</title>
	<para>
	    The following instructions will show you how to compile Netxx on most platforms. 
	</para>

	<!-- ################################################################### -->
	<section id="build-jam"><title>Using Boost.Jam</title>
	    <para>
		The Netxx build system uses Boost.Jam.  If you don't already have Boost.Jam installed, you will need to do that
		first. The Boost.Jam download site is 

		<link url="http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=72941">
		    http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=72941
		</link>
	    </para>

	    <para>
		By default, the Netxx build system will build a debugging version of Netxx. If you want to build a release version
		(one with optimizations and no debugging symbols) you can use the <constant>--release</constant> flag to
		<command>jam</command>.
	    </para>

	    <example><title>Building the Release Variant</title>
		<screen>jam --release</screen>
	    </example>

	    <para>
		Object files, libraries and executables are built into a release variant directory. For debug builds, they are
		placed into a directory called <filename>debug</filename>. For release builds, everything will be built into the
		<filename>release</filename> directory.
	    </para>

	    <para>
		If OpenSSL is installed into a non-standard directory, you may need to set the <constant>OPENSSL_INC</constant>
		and <constant>OPENSSL_LIB</constant> environment variables so that the Netxx build system knows where they are.
	    </para>
	</section>
	<!-- ################################################################### -->
	<section id="build-unix"><title>Building on Unix</title>
	    <para>
		To build Netxx from the command line of a Unix-like operating system you use the <filename>configure</filename>
		shell script. Running this script will test your environment and create some Jamfiles.
	    </para>

	    <para>
		After you run the <filename>configure</filename> script, you can run <command>jam</command> to build Netxx.
	    </para>

	    <example><title>Building Netxx on AIX</title>
		<para>
		    Here is an example build of Netxx on AIX.
		</para>

		<screen>env CC=gcc OPENSSL_INC=/usr/local/include OPENSSL_LIB=/usr/local/lib ./configure</screen>
		<screen>env CC=gcc OPENSSL_INC=/usr/local/include OPENSSL_LIB=/usr/local/lib jam --release</screen>
	    </example>
	</section>
	<!-- ################################################################### -->
	<section id="build-win"><title>Building on Windows</title>
	    <para>
		To build Netxx Windows, you first need to set up your environment for jam. If you will be compiling Netxx with
		Microsoft Visual Studio .NET, you can use the <filename>build\msvc7.bat</filename> batch file.
	    </para>

	    <example><title>Environment Setup for MSVC7</title>
		<para>
		    Open a CMD.EXE window, <command>cd</command> to the Netxx directory, and run the following commands.
		</para>

		<screen>build\msvc7.bat</screen>
		<screen>jam</screen>
	    </example>

	    <para>
		Once your environment is set up, you can use <command>jam</command> to build Netxx. If you would like TLS support,
		you must first build OpenSSL. Then you can tell the Netxx to build in support for TLS.
	    </para>

	    <example><title>Building with TLS Support</title>
		<para>
		    For this example, we will assume that you installed the OpenSSL header files in
		    <filename>c:\openssl\include</filename> and the OpenSSL libraries in <filename>c:\openssl\lib</filename>.
		</para>

		<screen>build\msvc7.bat</screen>
		<screen>jam -sWITH_OPENSSL=yes -sOPENSSL_INC=c:\openssl\include -sOPENSSL_LIB=c:\openssl\lib</screen>

		<para>
		    You can also set these variables in your environment.
		</para>

		<screen>build\msvc7.bat</screen>
		<screen>set WITH_OPENSSL=yes</screen>
		<screen>set OPENSSL_INC=c:\openssl\include</screen>
		<screen>set OPENSSL_LIB=c:\openssl\lib</screen>
		<screen>jam</screen>
	    </example>
	</section>
	<!-- ################################################################### -->
    </section>
    <!-- ################################################################### -->
    <section id="learn"><title>Learning the Netxx API</title>
	<para>
	    The fastest way to learn how to use Netxx is to review the included example programs. Netxx comes with many simple and
	    easy to understand example programs such as an echo client/server and daytime client/server.
	</para>

	<para>
	    For complete API reference, you should take a look at the doxygen generated web pages. Even with these resources, the
	    best place to hang out is in the Netxx header files.
	</para>
    </section>
    <!-- ################################################################### -->
</chapter>
<!--
    vim:ft=docbk:tw=130
-->
